// This is your updated Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  user
  model
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  RARELY
}

enum SymptomName {
  HEADACHE
  NAUSEA
  VOMITING
  DIARRHEA
  FATIGUE
  DIZZINESS
  INSOMNIA
  CONSTIPATION
  MUSCLE_PAIN
  JOINT_PAIN
  OTHER
}

enum Adherence {
  ALWAYS
  OFTEN
  SOMETIMES
  NEVER
  RARELY
}

enum Mood {
  HAPPY
  SAD
  ANGRY
  ANXIOUS
  STRESSED
  NEUTRAL
}

enum Sleep {
  GOOD
  BAD
  AVERAGE
}

enum Stress {
  NOT_STRESSED
  SLIGHTLY
  MODERATELY
  HIGHLY
  EXTREMELY
}

model User {
  id        String  @id @default(cuid()) @map("_id")
  clerkId   String  @unique
  email     String  @unique
  firstName String
  lastName  String
  lastLogin DateTime?
  image     String?
  isAdmin   Boolean @default(false)
  isPremium Boolean @default(false)
  mentalHealthScore Int @default(0)

  age           Int?
  height        Int?
  weight        Int?
  gender        String?
  bloodGroup    String?
  medicalIssues String?

  stripeCustomerId String? @map(name: "stripe_customer_id")
  stripeInvoiceId  String? @map(name: "stripe_invoice_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  symptoms       Symptom[]
  medications    Medication[]
  mentalwellness MentalWellness[]
  messages       Message[]
  billings       Billing[]
}

model Symptom {
  id        String      @id @default(cuid()) @map("_id")
  userId    String
  name      SymptomName
  intensity Int
  frequency Frequency
  loggedAt  DateTime?   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Medication {
  id        String    @id @default(cuid()) @map("_id")
  userId    String
  name      String
  dosage    String
  purpose   String?
  frequency Frequency
  adherence Adherence
  startDate DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MentalWellness {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  mood      Mood
  happiness Int
  sleep     Sleep
  stress    Stress
  anxiety   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  role      Role
  userId    String
  content   String   @db.VarChar(5000) // allow long messages to be stored
  answer    String? // Added answer variable
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id          String   @id @default(cuid())
  userId      String
  packageType String
  amount      Float
  receiptUrl  String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model MentalIllness {
  id          String   @id @default(cuid()) @map("_id")
  title       String   // Title of the mental illness
  description String   // Description of the mental illness
  image       String   @db.VarChar(500)
  link        String   @unique // URL to external resource
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id           String   @id @default(cuid()) @map("_id")
  title        String
  author       String?
  publishedDate String?
  readTime     String?
  description  String
  content      String?  @db.VarChar(500)
  imageUrl     String   @db.VarChar(500)
  category     String?
  blogUrl      String   @unique @db.VarChar(500)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model YouTubeVideo {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  url         String   @unique
  description String
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TechNews {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  url         String   @unique
  gif         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Review {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  stars       Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Book {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  author      String
  url         String   @unique
  description String
  image       String   @db.VarChar(500)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

